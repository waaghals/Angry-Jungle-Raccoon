@model Dictionary<string, List<BarometerDomain.Model.Evaluation>>

<div id="tabs" class="box_shadow">
    <ul>
        @{
            int i = 0;
            foreach (string s in ViewBag.ProjectNames)
            {
                <li><a href="#tabs-@i">@s</a></li>
                i++;
            }
        }

    </ul>
    @{
        i = 0;
        foreach (KeyValuePair<string, List<BarometerDomain.Model.Evaluation>> pair in Model)
        {
            <div id="tabs-@i" class="tab">
                <h3>Resultaten van @pair.Value[0].For.Name</h3>
                <table class="student_avrage_tabel">
                    @{

            List<string> nameslist = new List<string>();
            List<string> competentielist = new List<string>();
            foreach (BarometerDomain.Model.Evaluation eval in pair.Value)
            {
                if (!nameslist.Contains(eval.By.Name))
                {
                    nameslist.Add(eval.By.Name);
                }
                if (!competentielist.Contains(eval.Skill.Category))
                {
                    competentielist.Add(eval.Skill.Category);
                }
            }
            <tr style="border-bottom: 1px solid #bebebe">
                <td></td>
                @foreach (string name in nameslist)
                {
                    <td class="student_average_name">@name</td>
                }
                <td class="student_average_gemiddelde">Gemiddeld</td>
            </tr>
            foreach (string competentie in competentielist)
            {
                <tr class="student_average_row">
                    <td class="student_average_competentie">@competentie</td>
                    @{int avgGrade = 0;
                      int amountOfZero = 0;
                    foreach (BarometerDomain.Model.Evaluation eval in pair.Value)
                    {
                        if (eval.Skill.Category == competentie)
                        {
                            double curGrade = Convert.ToDouble(eval.Grade);
                            curGrade /= 10;
                                if(curGrade == 0)
                                {
                                    <text>-</text>
                                    amountOfZero++;
                                }
                                else
                                {
                                    if (@curGrade >= 6)
                                    {
                                        <td class="grade_high">@curGrade</td>
                                    }
                                    else if (curGrade >= 5)
                                    {
                                        <td class="grade_medium">@curGrade</td>
                                    }
                                    else
                                    {
                                        <td class="grade_low">@curGrade</td>
                                    }
                                }
                            avgGrade += eval.Grade;
                        }
                    }

                    avgGrade /= (nameslist.Count - amountOfZero);
                    double avgGradeDouble = Convert.ToDouble(avgGrade);
                    avgGradeDouble /= 10;
                    }
                    @if (avgGradeDouble >= 5.5)
                    {
                        <td class="student_average_good">@avgGradeDouble</td>
                    }
                    else
                    {
                        <td class="student_average_bad">@avgGradeDouble</td>
                    }
                </tr>
            }

                    }
                </table>
            </div>
            i++;
        }
    }

    <p class="linkBack">
        @Html.ActionLink("Terug naar mentor studenten", "MentorStudenten", "Docent", null, new { @class = "tableLink" })
    </p>

</div>
