@model Dictionary<string, List<BarometerDomain.Model.Evaluation>>

<div id="tabs">
    <ul>
        @{
            int i = 0;
            foreach (string s in ViewBag.ProjectNames)
            {
                <li><a href="#tabs-@i">@s</a></li>
                i++;
            }
        }

    </ul>
    @{
        i = 0;
        foreach (KeyValuePair<string, List<BarometerDomain.Model.Evaluation>> pair in Model)
        {
            <div id="tabs-@i" class="tab">
                <div class="tabcontainer">
                    <div class="competenties">
                        <h3>Resultaten</h3>
                        <table>
                            @{

            List<string> nameslist = new List<string>();
            List<string> competentielist = new List<string>();
            foreach (BarometerDomain.Model.Evaluation eval in pair.Value)
            {
                if (!nameslist.Contains(eval.By.Name))
                {
                    nameslist.Add(eval.By.Name);
                }
                if (!competentielist.Contains(eval.Skill.Category))
                {
                    competentielist.Add(eval.Skill.Category);
                }
            }
            <tr style="border-bottom:1px solid #bebebe">
                <td></td>
                @foreach (string name in nameslist)
                {
                    <td style="font-weight:bold">@name</td>
                }
                <td style="font-weight:bold; color:red;">Gemiddeld</td>
            </tr>
            foreach (string competentie in competentielist)
            {
                <tr style="border-bottom:1px solid #bebebe">
                    <td style="font-weight:bold">@competentie</td>
                    @{int avgGrade = 0;
                    foreach (BarometerDomain.Model.Evaluation eval in pair.Value)
                    {
                        if (eval.Skill.Category == competentie)
                        {
                            double curGrade = Convert.ToDouble(eval.Grade);
                            curGrade /= 10;
                            <td>@curGrade</td>
                            avgGrade += eval.Grade;
                        }
                    }
                    avgGrade /= nameslist.Count;
                    double avgGradeDouble = Convert.ToDouble(avgGrade);
                    avgGradeDouble /= 10;
                    }
                    <td>@avgGradeDouble</td>
                </tr>
            }

                            }
                        </table>
                    </div>
                </div>
            </div>
            i++;
        }
    }
</div>